- name: root and system level
  ignore_errors: true
  become: yes
  hosts: all
  vars_files:
    - vars_kube.yaml
  vars:
    new_paths: '/usr/local/go/bin'
  tasks:
  ############ HIGHLY OPINIONATED #####################
  # We hate snap for system services and applications #
  #####################################################
  - name: Get snap installed apps
    shell: "snap list | awk '(!/Name/){print $1}'"
    register: snap_apps

  - name: stop all snap apps
    ignore_errors: yes
    shell: snap remove "{{item}}"
    loop: "{{ snap_apps.stdout.split('\n') }}"

  - name: Stop snapd
    systemd:
      state: stopped
      name: snapd
      enabled: false
      daemon_reload: true

  - name: remove snap chache dir
    file:
      state: absent
      path: /var/cache/snapd

  - name: remove all snap packages
    apt:
      pkg:
        [snapd, gnome-software-plugin-snap ]

  - name: apt-get update
    apt: update_cache=yes

  - name: Install a suite of common tools
    apt:
      pkg:
        [
          dstat, golang, git, gcc, zsh, wget, curl, htop, sysstat, iotop, libaa-bin,
          iperf3, ipmitool, nmap, make, netcat, strace, fping, bmon, jq, pv, iputils-ping,
          iptraf-ng, tmux, unzip, ntpdate, net-tools, lvm2, zsh, dnsutils, rsyslog
        ]

  - name: Glances has issues installing on some platforms
    ignore_errors: true
    apt:
      pkg: glances

  - name: old_paths
    shell: awk -F \= '{print $2}' /etc/environment | sed -e 's/\:/\n/g' | sort -u | sed -e 's/\"//g' | xargs | sed -e 's/\ /:/g'
    register: old_paths

  - name: add go to the environment PATH
    lineinfile:
      path: /etc/environment
      state: present
      backrefs: yes
      regexp: '^PATH=.*'
      line: 'PATH={{ old_paths.stdout }}:{{ new_paths }}'

  - name: Set the Host TZ and hwclock to UTC
    community.general.timezone:
      hwclock: UTC
      name: UTC

  - name: copy ntpdate cron
    copy:
      force: yes
      src: files/crons/ntpdate
      dest: /etc/cron.d/ntpdate
      owner: root
      group: root
      mode: 0644

  - name: set time and date from NTP upstream
    shell: /usr/sbin/ntpdate time.nist.gov

  - name: rsyslog drop IPVS no route messages
    copy:
      force: yes
      dest: "/etc/rsyslog.d/0-drop-ipvs-spam.conf"
      content: |
        :msg, regex, ".*IPVS.*no destination available" ~

  - name: rsyslog remote server
    copy:
      force: yes
      dest: "/etc/rsyslog.d/99-remote-syslog.conf"
      content: |
        module(load="omprog")
        module(load="mmutf8fix")
        action(type="mmutf8fix" replacementChar="?")
        action(type="omfwd" protocol="tcp" target="{{SYSLOG}}" port="1514" Template="RSYSLOG_SyslogProtocol23Format" TCP_Framing="octet-counted")


  - name: increase file limits
    copy:
      force: yes
      dest: "/etc/security/limits.conf"
      mode: 0644
      content: |
        # put stuff here

  - name: Sysctl Tunings
    copy:
      dest: "/etc/sysctl.d/00-10g-network-tunings.conf"
      content: |
        # open files and inodes
        fs.inotify.max_user_instances = 10240
        # don't cache ssthresh from previous connection
        net.ipv4.tcp_no_metrics_save = 1
        # recommended default congestion control is htcp
        net.ipv4.tcp_congestion_control = htcp
        # If you are using Jumbo Frames, also set this
        net.ipv4.tcp_mtu_probing = 1
        # recommended to enable 'fair queueing'
        net.core.default_qdisc = fq
        # increase TCP max buffer size setable using setsockopt()
        net.core.rmem_max = 536870912
        net.core.wmem_max = 536870912
        # increase Linux autotuning TCP buffer limit
        net.ipv4.tcp_rmem = 4096 87380 268435456
        net.ipv4.tcp_wmem = 4096 65536 268435456
        # no swapping
        vm.swappiness = 0
        # file watches increase
        fs.inotify.max_queued_events = 131072
        fs.inotify.max_user_instances = 20480
        fs.inotify.max_user_watches = 65536
        user.max_inotify_instances = 20480
        user.max_inotify_watches = 65536

  - name: sysctl reload
    shell: sysctl --system

  - name: Write io-scheduler script
    copy:
      force: yes
      dest: "/etc/systemd/system/io-scheduler.sh"
      mode: 0755
      content: |
        for SCH in /sys/block/*/queue/scheduler ; do
            echo "deadline" > "${SCH}" 2>/dev/null
        done
        for DEPTH in /sys/block/*/queue/nr_requests ; do
            echo "1024" > "${DEPTH}" 2>/dev/null
        done
        for RAHEAD in /sys/block/*/queue/read_ahead_kb ; do
            echo "4096" > "${RAHEAD}" 2>/dev/null
        done

  - name: Write io-scheduler service
    copy:
      force: yes
      dest: "/etc/systemd/system/io-scheduler.service"
      content: |
        [Unit]
        Description=Setup foo
        #After=network.target

        [Service]
        Type=oneshot
        ExecStart=sh -c /etc/systemd/system/io-scheduler.sh
        RemainAfterExit=true
        StandardOutput=journal

        [Install]
        WantedBy=multi-user.target

  - name: Write cpu-performance script
    copy:
      force: yes
      dest: "/etc/systemd/system/cpu-performance.sh"
      mode: 0755
      content: |
        for CPU in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor ; do
            echo "performance" > "${CPU}" 2>/dev/null
        done

  - name: Write cpu-performance service
    copy:
      force: yes
      dest: "/etc/systemd/system/cpu-performance.service"
      content: |
        [Unit]
        Description=Setup foo
        #After=network.target

        [Service]
        Type=oneshot
        ExecStart=sh -c /etc/systemd/system/cpu-performance.sh
        RemainAfterExit=true
        StandardOutput=journal

        [Install]
        WantedBy=multi-user.target


  - name: enable and restart services
    systemd:
      name: "{{item}}"
      state: restarted
      enabled: true
      daemon_reload: true
    with_items:
    - io-scheduler
    - cpu-performance
    - rsyslog
