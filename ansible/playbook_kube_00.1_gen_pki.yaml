- name: Install PKI tools, fetch Google KMS secret, either decrypt existing PKI secrets, or generate new, encrypt, store in repo, add, and commit
  hosts: local
  vars_files:
    - vars_kube.yaml

  tasks:
  - name: Generate Kubernetes Control Plane CA TLS Certs
    block:

    - name: Generate Certificate Authority (CA)
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          cd "{{ cfssl }}"
          cfssl gencert -initca ca-csr.json | cfssljson -bare ca
      args:
        creates: "{{ cfssl }}/ca.pem"

    - name: Generate Admin Client Certificate
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          cd "{{ cfssl }}"
          cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin
      args:
        creates: "{{ cfssl }}/admin.pem"

    - name: Generate Controller Manager Client Certificate
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          cd "{{ cfssl }}"
          cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager
      args:
        creates: "{{ cfssl }}/kube-controller-manager.pem"

    - name: Generate Kube Proxy Client Certificate
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          cd "{{ cfssl }}"
          cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy
      args:
        creates: "{{ cfssl }}/kube-proxy.pem"

    - name: Generate Kube Aggregation Layer Certificate
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          cd "{{ cfssl }}"
          cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-aggregator-csr.json | cfssljson -bare kube-aggregator
      args:
        creates: "{{ cfssl }}/kube-aggregator.pem"

    - name: Generate Scheduler Client Certificate
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          cd "{{ cfssl }}"
          cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler
      args:
        creates: "{{ cfssl }}/kube-scheduler.pem"

    #### Building variables k8s_controller
    - name: Expand Hostnames into Dict of Name:IP
      ansible.builtin.set_fact:
        HOST_IP: "{{ HOST_IP | combine({ item: lookup('community.general.dig', item) }) }}"
      loop: "{{ groups['k8s_controller'] + [APISERVER] }}"

    - name: Debug Host IPs
      ansible.builtin.debug:
        msg: "{{ HOST_IP }}"

    - name: Flatten Dict to Formatted String, Store PEERS_MAP
      ansible.builtin.set_fact:
        PEERS_MAP: "{{ PEERS_MAP }}{{ (index > 0) | ternary(',', '') }}{{ item.key }},{{ item.value }}"
      loop: "{{ HOST_IP | dict2items }}"
      loop_control:
        index_var: index

    - name: Generate API Server Certificate
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          cd "{{ cfssl }}"
          cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname=apiserver,{{ HOST_IP['apiserver'] }},127.0.0.1,{{ '.'.join(SERVICE_CLUSTER_IP_RANGE.split('.')[:3]) }}.1,{{ KUBERNETES_HOSTNAMES }},{{ PEERS_MAP }},"metrics-server.kube-system.svc" -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes
      args:
        creates: "{{ cfssl }}/kubernetes.pem"

    - name: Generate Service Account Key Pair
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          cd "{{ cfssl }}"
          cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes service-account-csr.json | cfssljson -bare service-account
      args:
        creates: "{{ cfssl }}/service-account.pem"

    #### Building variables k8s
    - name: Expand Hostnames into Dict of Name:IP
      ansible.builtin.set_fact:
        HOST_IP: "{{ HOST_IP | combine({ item: lookup('community.general.dig', item) }) }}"
      loop: "{{ groups['k8s'] }}"

    - name: Debug Host IPs
      ansible.builtin.debug:
        msg: "{{ HOST_IP }}"

    # Node Client Certs
    - name: Generate Node Client Certificates
      ansible.builtin.include_tasks: subtask_kube_node_certs.yaml file={{ item }}
      with_inventory_hostnames:
        - k8s
