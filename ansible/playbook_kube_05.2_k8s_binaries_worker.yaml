- name: Kube 08 Containerd, Kubelet, CNI
  hosts: k8s
  strategy: linear
  become: true
  vars_files:
    - vars_kube.yaml

  tasks:
  - name: Get IP for a subset of hosts, store in HOST_IP
    ansible.builtin.set_fact:
      HOST_IP: "{{ HOST_IP | combine({ item: lookup('community.general.dig', item) }) }}"
    loop: "{{ groups['k8s'] }}"

######### Dirs for all the things at once
  - name: Mkdir all
    ansible.builtin.file:
      path: "{{ item.value }}"
      state: directory
      mode: "0755"
    with_dict: "{{ worker_dirs.values() }}"

############ CRI
  - name: CRI binaries
    block:
    - name: create tempdir
      ansible.builtin.tempfile:
        state: directory
        suffix: .download
      register: tmpdir_1

    - name: Installing crictl
      ansible.builtin.unarchive:
        remote_src: true
        src: https://github.com/kubernetes-sigs/cri-tools/releases/download/v{{ CRI_UTIL_VERSION }}/crictl-v{{ CRI_UTIL_VERSION }}-linux-amd64.tar.gz
        dest: "{{ tmpdir_1.path }}"
        keep_newer: true

    - name: command because no mv available
      ansible.builtin.command: mv "{{ tmpdir_1.path }}/crictl" "{{ worker_dirs['system']['bin'] }}/crictl"

    - name: Cleanup
      ansible.builtin.file:
        path: "{{ tmpdir_1.path }}"
        state: absent

############ runc
    - name: Installing runc
      ansible.builtin.get_url:
        url: https://github.com/opencontainers/runc/releases/download/v{{ RUNC_VERSION }}/runc.amd64
        dest: "{{worker_dirs['system']['bin']}}/runc"
        mode: "0755"

############ CNI-PLUGINS
    - name: Installing CNI-PLUGINS
      ansible.builtin.unarchive:
        remote_src: true
        src: https://github.com/containernetworking/plugins/releases/download/v{{ CNI_PLUGIN_VERSION }}/cni-plugins-linux-amd64-v{{ CNI_PLUGIN_VERSION }}.tgz
        dest: "{{ worker_dirs['cni']['bin'] }}"
        keep_newer: true

    - name: CNI Config Files
      ansible.builtin.copy:
        force: true
        dest: "/etc/cni/net.d/{{ item }}"
        content: '{{ lookup("template", "files/cni/{{ item }}.j2") }}'
        mode: "0644"
        group: root
        owner: root
      with_items:
        - 99-loopback.conf

################# Containerd
  - name: "Containerd"
    block:
    - name: Mkdir /etc/containerd
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: "0755"

    - name: Create tempdir
      ansible.builtin.tempfile:
        state: directory
        suffix: .download
      register: tmpdir_1

    - name: Installing containerd
      ansible.builtin.unarchive:
        remote_src: true
        src: https://github.com/containerd/containerd/releases/download/v{{ CONTAINERD_VERSION }}/containerd-{{ CONTAINERD_VERSION }}-linux-amd64.tar.gz
        dest: "{{ tmpdir_1.path }}"

    - name: get filenames
      ansible.builtin.find:
        paths: "{{ tmpdir_1.path }}/bin"
        patterns: "*"
      register: cont_files

    - name: Mv files to bindir
      ansible.builtin.command: mv "{{ item.path }}" "{{ worker_dirs['system']['bin'] }}/{{ item.path | basename }}-{{ CONTAINERD_VERSION }}"
      with_items:  "{{ cont_files.files }}"

    - name: Chown files
      ansible.builtin.command: chown root:root "{{ worker_dirs['system']['bin'] }}/{{ item.path | basename }}-{{ CONTAINERD_VERSION }}"
      with_items:  "{{ cont_files.files }}"

    - name: Ln files to bindir
      ansible.builtin.command: ln -sf "{{ worker_dirs['system']['bin'] }}//{{ item.path | basename }}-{{ CONTAINERD_VERSION }}" "{{ worker_dirs['system']['bin'] }}//{{ item.path | basename }}"
      with_items:  "{{ cont_files.files }}"

    - name: Rm tempdir
      ansible.builtin.file:
        state: absent
        name: "{{ tmpdir_1.path }}"

    - name: Write Containerd config
      ansible.builtin.shell:
        cmd: containerd config default > /etc/containerd/config.toml

    - name: Copy the update_config.py script to the target machine
      ansible.builtin.copy:
        src: files/containerd/udpate_config.py
        dest: /tmp/update_config.py
        mode: '0755'

    - name: Ensure systemd_cgroup and runtime settings in containerd config
      ansible.builtin.command: >
        python3 /tmp/update_config.py /etc/containerd/config.toml {{ nvidia_gpu | default(false) | ternary(1, 0) }}

    - name: Write systemd Startup
      ansible.builtin.copy:
        force: true
        dest: "/etc/systemd/system/containerd.service"
        content: |
          [Unit]
          Description=containerd container runtime
          Documentation=https://containerd.io
          After=network.target

          [Service]
          ExecStartPre=/sbin/modprobe overlay
          ExecStart=/usr/local/bin/containerd
          Restart=always
          RestartSec=5
          Delegate=true
          KillMode=process
          OOMScoreAdjust=-999
          LimitNOFILE=1048576
          LimitNPROC=infinity
          LimitCORE=infinity

          [Install]
          WantedBy=multi-user.target

    - name: Enable and restart service
      ansible.builtin.systemd:
        name: containerd
        state: restarted
        enabled: true
        daemon_reload: true

#################### Kubelet
  - name: Kubelet and Kube-proxy
    block:

  ############  fix dpkg if things went sideways #####################
    - name: Handle dpkg locks and repair
      include_tasks: subtask_fix_dpkg_lock.yaml

  ############  fix dpkg if things went sideways #####################
    - name: Worker Apt Packages
      ansible.builtin.shell: name={{ item }} state=latest
      register: apt_status
      until: apt_status is success
      delay: 6
      retries: 30
      with_items: [socat,conntrack,ipset,nfs-common]

    - name: "Installing kubernetes {{version}}"
      ansible.builtin.get_url:
        url: "{{ KUBE_URL }}/{{item}}"
        dest: "{{ worker_dirs['system']['bin'] }}/{{item}}"
        mode: "0755"
      with_items: "{{worker_binaries}}"

    - name: Register gpu var
      ansible.builtin.set_fact:
        nvidia_gpu: "{{ nvidia_gpu }}"

    - name: Kube*-configs
      ansible.builtin.copy:
        force: true
        dest: "{{ item.value }}/{{ item.key }}-config.yaml"
        content: '{{ lookup("template", "files/kubelet/{{item.key}}-config.yaml.j2") }}'
        mode: "0644"
        group: root
        owner: root
      with_dict: {
        kubelet: /var/lib/kubernetes/,
        kube-proxy: /var/lib/kube-proxy/
        }

    - name: Systemd service
      ansible.builtin.copy:
        force: true
        dest: "/etc/systemd/system/{{item}}.service"
        content: '{{ lookup("template", "files/kubelet/{{ item }}.service.j2") }}'
        mode: "0644"
        group: root
        owner: root
      with_items:
        - kubelet
        - kube-proxy

    - name: Copy ntpdate cron
      ansible.builtin.copy:
        force: true
        src: files/crons/ntpdate
        dest: /etc/cron.d/ntpdate
        owner: root
        group: root
        mode: "0644"

    - name: Systemd enable and restart kubelet and proxy
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: restarted
        enabled: true
        daemon_reload: true
      with_items:
        - kubelet
        # - kube-proxy ## comment out if kube-proxy replaced with cilium
