- name: Kube 07 etcd
  hosts: etcd
  become: yes
  vars_files:
    - vars_kube.yaml
  vars:
    confpath: "/etc/etcd"
    instpath: "/usr/local/etcd"
    datapath: "/var/lib/etcd"
    org: etcd-io
    repo: etcd
    filename: etcd-v3.5.0-linux-amd64.tar.gz
    version: latest
    project_url: https://api.github.com/repos/{{ org }}/{{ repo }}/releases

  tasks:
    - name: CA and certs
      block:
      - name: MKdir
        file:
          path: "{{confpath}}"
          state: directory
          mode: 0700
      - name: Copy certs
        copy:
          src: "files/cfssl/{{item}}"
          dest: "{{confpath}}/{{item}}"
          mode: 0700
        with_items:
          - ca.pem
          - kubernetes-key.pem
          - kubernetes.pem

    - name: check {{ repo }} version
      uri:
        url: "{{ project_url }}/{{ version }}"
        return_content: true
      register: latest_version

    - name: check if {{ repo }}-{{ version }} is already there
      stat:
        path: "{{ instpath }}/{{ repo }}-{{ latest_version.json.tag_name }}"
      register: newestbinary

    - name: Download and link to version {{ version }}
      block:
        - name: "check if {{ datapath }} exists"
          file:
            path: "{{ datapath }}"
            state: directory
            mode: 0700

        - name: "check if {{ instpath }} exists"
          file:
            path: "{{ instpath }}"
            state: directory
            mode: 0700

        - name: create tempdir
          tempfile:
            state: directory
            suffix: _dwnld
          register: tempfolder_1

        - name: "installing {{ repo }} {{ latest_version.json.tag_name }}"
          # idea from: https://stackoverflow.com/a/62672308/886659
          loop: "{{ latest_version.json.assets }}"
          when: "filename|string in item.name"
          unarchive:
            remote_src: yes
            src: "{{ item.browser_download_url }}"
            dest: "{{ tempfolder_1.path }}"
            keep_newer: yes
            extra_opts:
            - --strip=1
            - --no-anchored
            - "{{ repo }}"

        - name: command because no mv available
          command: mv "{{ tempfolder_1.path }}/{{ repo }}" "{{ instpath }}/{{ repo }}-{{ latest_version.json.tag_name }}"
          args:
            creates: "{{ instpath }}/{{ repo }}-{{ latest_version.json.tag_name }}"

        - name: "link {{ repo }}-{{ latest_version.json.tag_name }} -> {{ repo }} "
          file:
            src: "{{ instpath }}/{{ repo }}-{{ latest_version.json.tag_name }}"
            dest: "{{ instpath }}/{{ repo }}"
            state: link
            force: yes
      when: not newestbinary.stat.exists
      always:
        - name: delete {{ tempfolder_1.path|default("tempfolder") }}
          file:
            path: "{{ tempfolder_1.path }}"
            state: absent
          when: tempfolder_1.path is defined
          ignore_errors: true

    - name: Make the EtcD systemd File
      block:
        # # Make variables for the etcD configfile
        # - name: Set variable all_hosts_but_this
        #   set_fact:
        #     all_hosts_but_this: "{{ groups['etcd'] | difference([inventory_hostname]) }}"

        - name: Get IP for a subset of hosts, store in HOST_IP
          set_fact:
            HOST_IP: "{{ HOST_IP | combine({ item: lookup('community.general.dig', item) }) }}"
          loop: "{{ groups['etcd'] }}"

        - name: Flatten dict to formatted string, store PEERS_MAP
          set_fact:
            PEERS_MAP: "{{ PEERS_MAP }}{{ (index > 0)|ternary(',','') }}{{ item.key }}=https://{{ item.value }}:2380"
          loop: "{{  HOST_IP | dict2items }}"
          loop_control:
            index_var: index

        # - name: Get IP for all hosts, store in HOST_IP
        #   set_fact:
        #     HOST_IP: "{{ HOST_IP | combine({ item: lookup('community.general.dig', item) }) }}"
        #   loop: "{{ groups['etcd'] }}"

        # Create the config file from template
        - name: systemd Unit file
          copy:
            dest: "/etc/systemd/system/etcd.service"
            content: '{{ lookup("template", "files/etcd/etcd.service.j2") }}'
            mode: 0644
            group: root
            owner: root

        - name: enable and restart etcd
          systemd:
            name: etcd
            state: restarted
            enabled: true
            daemon_reload: true
