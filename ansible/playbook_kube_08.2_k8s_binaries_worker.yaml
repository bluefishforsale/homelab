- name: Kube 08 Containerd, Kubelet, CNI
  hosts: k8s
  become: yes
  vars_files:
    - vars_kube.yaml
  vars:
    dirs:
      cni:
        conf: /etc/cni/net.d
        bin: /opt/cni/bin
      kubernetes:
        conf: /etc/kubernetes/config
        static: /etc/kubernetes/manifests
        data: /var/lib/kubernetes
        lock: /var/run/kubernetes
      system:
        bin: /usr/local/bin
      kube-proxy:
        data: /var/lib/kube-proxy
    binaries:
      - kube-proxy
      - kubelet
      - kubectl

  tasks:

    - name: Get IP for a subset of hosts, store in HOST_IP
      set_fact:
        HOST_IP: "{{ HOST_IP | combine({ item: lookup('community.general.dig', item) }) }}"
      loop: "{{ groups['k8s'] }}"

    ######### Dirs for all the things at once
    - name: "Mkdir all"
      file:
        path: "{{item.value}}"
        state: directory
        mode: 0755
      with_dict: "{{dirs.values()}}"


############ CRI binaries
    - name: CRI binaries
      block:
        - name: create tempdir
          tempfile:
            state: directory
            suffix: .download
          register: tmpdir_1

        - name: Installing crictl
          unarchive:
            remote_src: yes
            src: https://github.com/kubernetes-sigs/cri-tools/releases/download/v{{CRI_UTIL_VERSION}}/crictl-v{{CRI_UTIL_VERSION}}-linux-amd64.tar.gz
            dest: "{{ tmpdir_1.path }}"
            keep_newer: yes

        - name: command because no mv available
          command: mv "{{tmpdir_1.path}}/crictl" "{{dirs['system']['bin']}}/crictl"

        - name: Cleanup
          file:
            path: "{{tmpdir_1.path}}"
            state: absent

############ runc
        - name: Installing runc
          get_url:
            url: https://github.com/opencontainers/runc/releases/download/v{{RUNC_VERSION}}/runc.amd64
            dest: "{{dirs['system']['bin']}}/runc"
            mode: 0755

############ CNI-PLUGINS
        - name: Installing CNI-PLUGINS
          unarchive:
            remote_src: yes
            src: https://github.com/containernetworking/plugins/releases/download/v{{CNI_PLUGIN_VERSION}}/cni-plugins-linux-amd64-v{{CNI_PLUGIN_VERSION}}.tgz
            dest: "{{dirs['cni']['bin']}}"
            keep_newer: yes

        - name: CNI Config Files
          copy:
            force: yes
            dest: "/etc/cni/net.d/{{item}}"
            content: '{{ lookup("template", "files/cni/{{item}}.j2") }}'
            mode: 0644
            group: root
            owner: root
          with_items:
            - 99-loopback.conf

################# Sysctl, modules, swap
    - name: Sysctl, modules, swap
      block:

      - name: Swap off in /etc/fstab
        replace:
          path: /etc/fstab
          regexp: '^(\/swap.*)$'
          replace: '#\1'

      - name: swapp-off command for current boot
        shell: swapoff -a

      - name: Container Modules
        copy:
          force: yes
          dest: "/etc/modules-load.d/99-containerd.conf"
          content: |
            overlay
            br_netfilter

      - name: Live Modprobe
        shell:
          cmd: modprobe "{{item}}"
        with_items: [overlay, br_netfilter]

      - name: Write Sysctl Startup Params
        copy:
          dest: "/etc/sysctl.d/99-kubernetes-cri.conf"
          content: |
            net.bridge.bridge-nf-call-iptables  = 1
            net.ipv4.ip_forward                 = 1
            net.bridge.bridge-nf-call-ip6tables = 1

      - name: sysctl reload
        shell: sysctl --system

################# Containerd
    - name: "Containerd"
      block:

        - name: mkdir /etc/containerd
          file:
            path: /etc/containerd
            state: directory
            mode: 0755

       ############### Binary
        - name: create tempdir
          tempfile:
            state: directory
            suffix: .download
          register: tmpdir_1

        - name: Installing containerd
          unarchive:
            remote_src: yes
            src: https://github.com/containerd/containerd/releases/download/v{{CONTAINERD_VERSION}}/containerd-{{CONTAINERD_VERSION}}-linux-amd64.tar.gz
            dest: "{{ tmpdir_1.path }}"

        - name: get filenames
          find:
            paths: "{{tmpdir_1.path}}/bin"
            patterns: "*"
          register: cont_files

        - name: mv files to bindir
          command: mv "{{item.path}}" "{{dirs['system']['bin']}}/{{item.path|basename}}-{{CONTAINERD_VERSION}}"
          with_items:  "{{cont_files.files}}"

        - name: chown files
          command: chown root:root "{{dirs['system']['bin']}}/{{item.path|basename}}-{{CONTAINERD_VERSION}}"
          with_items:  "{{cont_files.files}}"

        - name: ln files to bindir
          command: ln -sf "{{dirs['system']['bin']}}//{{item.path|basename}}-{{CONTAINERD_VERSION}}" "{{dirs['system']['bin']}}//{{item.path|basename}}"
          with_items:  "{{cont_files.files}}"

        - name: rm tempdir
          file:
            state: absent
            name: "{{tmpdir_1.path}}"

      #  ############### Config
      #   - name: Write Containerd config
      #     copy:
      #       force: yes
      #       content: '{{ lookup("template", "files/containerd/default.toml.j2") }}'
      #       dest: /etc/containerd/config.toml

        - name: Write systemd Startup
          copy:
            force: yes
            dest: "/etc/systemd/system/containerd.service"
            content: |
              [Unit]
              Description=containerd container runtime
              Documentation=https://containerd.io
              After=network.target

              [Service]
              ExecStartPre=/sbin/modprobe overlay
              ExecStart=/usr/local/bin/containerd
              Restart=always
              RestartSec=5
              Delegate=yes
              KillMode=process
              OOMScoreAdjust=-999
              LimitNOFILE=1048576
              LimitNPROC=infinity
              LimitCORE=infinity

              [Install]
              WantedBy=multi-user.target

        - name: enable and restart service
          systemd:
            name: containerd
            state: restarted
            enabled: true
            daemon_reload: true

#################### Kubelet
    - name: Kubelet and Kube-proxy
      block:

        - name: Worker Apt Packages
          apt:
            pkg: [ socat, conntrack, ipset, nfs-common]

        - name: "installing kubernetes {{version}}"
          get_url:
            url: "{{KUBE_URL}}/{{ item }}"
            dest: "{{dirs['system']['bin']}}/{{ item }}"
            mode: 0755
          with_items: "{{binaries}}"

        - name: register gpu var
          set_fact:
            nvidia_gpu: "{{nvidia_gpu}}"

        - name: Kube*-configs
          copy:
            force: yes
            dest: "{{item.value}}/{{item.key}}-config.yaml"
            content: '{{ lookup("template", "files/kubelet/{{item.key}}-config.yaml.j2") }}'
            mode: 0644
            group: root
            owner: root
          with_dict: {
            kubelet: /var/lib/kubernetes/,
            kube-proxy: /var/lib/kube-proxy/
            }

        - name: systemd service
          copy:
            force: yes
            dest: "/etc/systemd/system/{{item}}.service"
            content: '{{ lookup("template", "files/kubelet/{{item}}.service.j2") }}'
            mode: 0644
            group: root
            owner: root
          with_items:
            - kubelet
            - kube-proxy

        - name: copy ntpdate cron
          copy:
            force: yes
            src: files/crons/ntpdate
            dest: /etc/cron.d/ntpdate
            owner: root
            group: root
            mode: 0644

        - name: systemd enable and restart kubelet and proxy
          systemd:
            name: "{{item}}"
            state: restarted
            enabled: true
            daemon_reload: true
          with_items:
            - kubelet
            - kube-proxy
