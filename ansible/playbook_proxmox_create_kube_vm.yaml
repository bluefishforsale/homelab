---
- name: Automate VM creation and cloning on Proxmox VE
  hosts: proxmox
  become: yes
  vars:
    vm_base_id: 9999
    vm_template_name: debian-12-generic-amd64
    qcow2_url: "https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2"
    ssh_key_url: "https://github.com/bluefishforsale.keys"
    storage_pool: "ceph-lvm"
    vmbridge: "vmbr0"
    cores_small: 4
    memory_small: 8192  # 8G
    cores_large: 9
    memory_large: 57344  # 56G
    gateway: "192.168.1.1"
    nameserver: "192.168.1.2"
    disk_resize: "+18G"
    gpu_pci: "42:00"

  tasks:

  - name: Download Debian 12 QCOW2 image
    ansible.builtin.get_url:
      url: "{{ qcow2_url }}"
      dest: /tmp/debian-12-generic-amd64.qcow2
      mode: '0644'

  - name: Download SSH public key
    ansible.builtin.get_url:
      url: "{{ ssh_key_url }}"
      dest: /tmp/rsa.key
      mode: '0644'

  - name: Check if the base VM exists
    ansible.builtin.shell: |
      qm status {{ vm_base_id }}
    register: base_vm_status
    ignore_errors: true
    changed_when: false

  - name: Create the base VM if it doesn't exist
    ansible.builtin.shell: >
      qm create {{ vm_base_id }} --name {{ vm_template_name }} --net0 virtio,bridge={{ vmbridge }}
    when: base_vm_status.rc == 2

  - name: Import QCOW2 disk to VM
    ansible.builtin.shell: >
      qm importdisk {{ vm_base_id }} /tmp/debian-12-generic-amd64.qcow2 {{ storage_pool }}
    when: base_vm_status.rc == 2

  - name: Configure the base VM
    block:
      - name: Set VM options
        ansible.builtin.shell: >
          qm set {{ vm_base_id }} --ide2 {{ storage_pool }}:cloudinit
        when: base_vm_status.rc == 2

      - name: Attach and configure disks and interfaces
        ansible.builtin.shell: >
          qm set {{ vm_base_id }} --scsihw virtio-scsi-pci --scsi0 {{ storage_pool }}:vm-{{ vm_base_id }}-disk-0
        when: base_vm_status.rc == 2

      - name: Configure boot order and serial console
        ansible.builtin.shell: >
          qm set {{ vm_base_id }} --boot order='scsi0' --serial0 socket --vga serial0
        when: base_vm_status.rc == 2

      - name: Set SSH keys and other VM parameters
        ansible.builtin.shell: >
          qm set {{ vm_base_id }} --sshkeys /tmp/rsa.key --hotplug network,disk --bios ovmf --machine q35 --efidisk0 {{ storage_pool }}:0,format=raw,efitype=4m,pre-enrolled-keys=0,size=1M
        when: base_vm_status.rc == 2

      - name: Set CPU cores, memory, and agent
        ansible.builtin.shell: >
          qm set {{ vm_base_id }} --cores 2 --memory 4096 --agent enabled=1
        when: base_vm_status.rc == 2

      - name: Convert VM to template
        ansible.builtin.shell: >
          qm template {{ vm_base_id }}
        when: base_vm_status.rc == 2

  - name: Initialize VM status dictionary
    set_fact:
      vm_status_dict: {}

  - name: Check status of each cloned VM
    loop: "{{ vmids }}"
    ansible.builtin.shell: |
      qm status {{ item }}
    register: vm_status_check
    ignore_errors: true
    changed_when: false

  - name: Store VM status in dictionary
    set_fact:
      vm_status_dict: "{{ vm_status_dict | combine({ item: vm_status_check.results[loop.index0].rc }) }}"
    loop: "{{ vmids }}"

  - name: Clone VM from template if not already created
    loop: "{{ vmids }}"
    ansible.builtin.shell: >
      qm clone {{ vm_base_id }} {{ item }}
    when: vm_status_dict[item] == 2

  - name: Set basic configuration for cloned VM
    loop: "{{ vmids }}"
    ansible.builtin.shell: >
      qm set {{ item }} --name kube{{ item }} --ipconfig0 ip=$(host kube{{ item }}.home | awk '{{print $NF}}')/24,gw={{ gateway }} --nameserver={{ nameserver }} --onboot 1
    when: vm_status_dict[item] == 2

  - name: Set SSH keys for cloned VM
    loop: "{{ vmids }}"
    ansible.builtin.shell: >
      qm set {{ item }} --sshkeys /tmp/rsa.key
    when: vm_status_dict[item] == 2

  - name: Resize VM disk
    loop: "{{ vmids }}"
    ansible.builtin.shell: >
      qm resize {{ item }} scsi0 {{ disk_resize }}
    when: vm_status_dict[item] == 2

  - name: Configure cores and memory for VM
    loop: "{{ vmids }}"
    ansible.builtin.shell: |
      qm set {{ item }} --cores {{ item|int is divisibleby(10) | ternary(cores_small, cores_large) }} --memory {{ item|int is divisibleby(10) | ternary(memory_small, memory_large) }}
    when: vm_status_dict[item] == 2

  - name: Configure GPU passthrough for specific VM
    loop: "{{ vmids }}"
    ansible.builtin.shell: >
      qm set {{ item }} --hostpci0={{ gpu_pci }},pcie=1
    when: item == '613' and vm_status_dict[item] == 2

  - name: Start all VMs except template and already running VMs
    loop: "{{ vmids }}"
    ansible.builtin.shell: >
      qm start {{ item }}
    when: 
      - vm_status_dict[item] == 0
      - "'status: stopped' in vm_status_dict[item]"
