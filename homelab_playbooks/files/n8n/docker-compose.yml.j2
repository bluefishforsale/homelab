version: '3.8'

services:
  n8n:
    image: {{ image }}:{{ version }}
    container_name: {{ service }}
    hostname: {{ service }}
    restart: unless-stopped
    
    # GPU support for Nvidia P2000
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu, compute, utility]
    
    # Runtime configuration for nvidia
    runtime: nvidia
    
    environment:
      # Encryption key for sensitive data
      - N8N_ENCRYPTION_KEY={{ ai_services.n8n.encryption_key }}
      # Database Configuration
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n-db
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD={{ ai_services.n8n.database_password }}
      - DB_POSTGRESDB_SCHEMA=public
      # Network Configuration
      - N8N_HOST=0.0.0.0
      - N8N_PORT={{ port }}
      - N8N_PROTOCOL=http
      - WEBHOOK_URL={{ ai_services.n8n.webhook_url | default('http://n8n.home/') }}
      - N8N_EDITOR_BASE_URL=http://n8n.home/
      # Security Configuration
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=root
      - N8N_BASIC_AUTH_PASSWORD={{ gitlab.root_password }}
      - N8N_SECURE_COOKIE=false
      # Proxy Configuration
      - N8N_PATH=/
      - N8N_DISABLE_PRODUCTION_MAIN_PROCESS=false
      # Logging Configuration
      - N8N_LOG_LEVEL=info
      - N8N_LOG_OUTPUT=console
      # Timezone Configuration
      - GENERIC_TIMEZONE=America/Los_Angeles
      - TZ=America/Los_Angeles
      # Performance Configuration
      - N8N_PAYLOAD_SIZE_MAX=16
      - N8N_METRICS=true
      - N8N_DIAGNOSTICS_ENABLED=true
      # GPU Configuration
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - CUDA_VISIBLE_DEVICES=all
      # Node.js Configuration
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=4096
      # User Configuration
      - N8N_USER_FOLDER=/home/node/.n8n
      - N8N_DISABLE_UI=false
      - N8N_PERSONALIZATION_ENABLED=false
    
    ports:
      - "{{ port }}:{{ port }}"
    
    volumes:
      - {{ home }}/data:/home/node/.n8n
      - {{ home }}/config:/home/node/.n8n/config
      - {{ home }}/logs:/var/log/n8n
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount for GPU libraries
      - /usr/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:ro
      - /usr/local/cuda:/usr/local/cuda:ro
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:{{ port }}/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    
    # User mapping
    user: "{{ uid }}:{{ gid }}"
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Service dependencies
    depends_on:
      - n8n-db
    
    # Network configuration
    networks:
      - n8n_network

  n8n-db:
    image: postgres:15-alpine
    container_name: n8n-db
    hostname: n8n-db
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=n8n
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD={{ ai_services.n8n.database_password }}
      - PGDATA=/var/lib/postgresql/data/pgdata
    
    volumes:
      - {{ home }}/database:/var/lib/postgresql/data
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n -d n8n"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    
    # User mapping
    user: "{{ uid }}:{{ gid }}"
    
    # Security options
    security_opt:
      - no-new-privileges:true

    # Use default bridge network mode (same as existing containers)
    network_mode: bridge

# No custom networks needed - using default bridge
