---
- name: Gitlab Installation
  hosts: gitlab
  become: true
  gather_facts: true
  vars:
    service: gitlab
    services:
    - "{{ service }}.service"
    hostname: "{{ service }}.home"
    gitlab_external_url: "http://{{ hostname }}"
    gitlab_version: "18.2.0-ce.0"
    gitlab_root_username: "root"
    gitlab_root_password: "admin"
    gitlab_registration_token: "glrt-3vrkXP2CIB1R00O0l_lxom86MQp0OjEKdToxCw.01.121epd4z0"

  tasks:
  - name: Required packages pre-installation
    block:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Configure Postfix non-interactively
      debconf:
        name: postfix
        question: "{{ item.question }}"
        value: "{{ item.value }}"
        vtype: "{{ item.vtype }}"
      loop:
        - { question: 'postfix/mailname', value: '{{ hostname }}', vtype: 'string' }
        - { question: 'postfix/main_mailer_type', value: 'Internet Site', vtype: 'string' }
      notify: restart postfix

    - name: Install required packages
      apt:
        name:
        - apt-transport-https
        - ca-certificates
        - curl
        - gpg
        - gnupg2
        - openssh-server
        - perl
        - wget
        - tzdata
        - postfix
        state: present

    - name: Add GitLab CE GPG key
      apt_key:
        url: https://packages.gitlab.com/gitlab/gitlab-ce/gpgkey
        state: present

    - name: Add GitLab CE repository
      apt_repository:
        repo: "deb https://packages.gitlab.com/gitlab/gitlab-ce/{{ ansible_distribution | lower }}/ {{ ansible_distribution_release }} main"
        state: present
        update_cache: yes

  - name: GitLab installation block
    block:

    - name: Check if GitLab is already installed
      package_facts:
        manager: apt

    - name: Install GitLab CE
      apt:
        name: "gitlab-ce={{ gitlab_version }}"
        state: present
        update_cache: yes
      environment:
        EXTERNAL_URL: "{{ gitlab_external_url }}"
      when: "'gitlab-ce' not in ansible_facts.packages or ansible_facts.packages['gitlab-ce'][0].version != gitlab_version"
      register: gitlab_installed

    - name: Configure GitLab for local domain
      blockinfile:
        path: /etc/gitlab/gitlab.rb
        block: |
          # Disable Let's Encrypt for local domains
          letsencrypt['enable'] = false
          
          # Configure external URL for local domain
          external_url '{{ gitlab_external_url }}'
          
          # GitLab configuration
          gitlab_rails['gitlab_email_enabled'] = true
          gitlab_rails['gitlab_email_from'] = 'gitlab@{{ hostname }}'
          gitlab_rails['gitlab_email_display_name'] = 'GitLab'
          
          # SMTP settings for Postfix
          gitlab_rails['smtp_enable'] = true
          gitlab_rails['smtp_address'] = 'localhost'
          gitlab_rails['smtp_port'] = 25
          gitlab_rails['smtp_domain'] = '{{ hostname }}'
          
          # Disable built-in nginx if using external proxy (optional)
          # nginx['enable'] = false
          
          # Security settings
          gitlab_rails['gitlab_default_projects_features_issues'] = true
          gitlab_rails['gitlab_default_projects_features_merge_requests'] = true
          gitlab_rails['gitlab_default_projects_features_wiki'] = true
          gitlab_rails['gitlab_default_projects_features_snippets'] = true
          
          # Nginx configuration to handle root path properly
        marker: "# {mark} ANSIBLE MANAGED BLOCK - GitLab Configuration"
        create: yes
      notify: reconfigure gitlab

    - name: Set proper permissions on GitLab config
      file:
        path: /etc/gitlab/gitlab.rb
        owner: root
        group: root
        mode: '0600'

  # Wait for GitLab to be fully initialized before setting credentials
  - name: Wait for GitLab to be fully ready
    uri:
      url: "{{ gitlab_external_url }}/users/sign_in"
      method: GET
      status_code: 200
    register: gitlab_ready
    until: gitlab_ready.status == 200
    retries: 30
    delay: 10
    ignore_errors: true

  # Read the initial password file for fallback
  - name: Read the initial_root_password file
    slurp:
      src: /etc/gitlab/initial_root_password
    register: password_file
    ignore_errors: true

  # Robust root user credential setup
  - name: Install GitLab Runner
    block:
    - name: Download and run GitLab Runner repository setup script
      shell: |
        curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | bash
      args:
        creates: /etc/apt/sources.list.d/runner_gitlab-runner.list

    - name: Install GitLab Runner package
      apt:
        name: gitlab-runner
        state: present
        update_cache: yes

    - name: Check if GitLab Runner is already registered
      command: gitlab-runner list
      register: runner_list
      changed_when: false
      failed_when: false

    - name: Register GitLab Runner
      command: >
        gitlab-runner register
        --non-interactive
        --url "{{ gitlab_external_url }}"
        --token "{{ gitlab_registration_token }}"
        --executor "shell"
      when: "'{{ hostname }}' not in runner_list.stderr"
      register: runner_registered

    - name: Display runner registration status
      debug:
        msg: |
          GitLab Runner registered successfully!
          Note: Configure tags, description, and other settings in GitLab UI at:
          Admin Area -> Runners -> Edit runner settings
      when: runner_registered.changed

  - name: Configure GitLab root user credentials
    block:
      - name: Set up root user with custom credentials
        shell: |
          gitlab-rails runner "
          begin
            # Find or create root user
            user = User.find_by(username: '{{ gitlab_root_username }}') || User.find_by(id: 1)
            
            if user.nil?
              puts 'Creating new root user'
              user = User.new(
                username: '{{ gitlab_root_username }}',
                email: 'admin@{{ hostname }}',
                name: 'Administrator',
                admin: true
              )
            else
              puts 'Found existing user: ' + user.username + ' (' + user.email + ')'
              # Update username if different
              user.username = '{{ gitlab_root_username }}' if user.username != '{{ gitlab_root_username }}'
            end
            
            # Set password and account properties
            user.password = '{{ gitlab_root_password }}'
            user.password_confirmation = '{{ gitlab_root_password }}'
            user.admin = true
            user.can_create_group = true
            user.projects_limit = 0  # Unlimited projects
            
            # Ensure account is active and confirmed
            user.skip_confirmation!
            user.skip_reconfirmation!
            user.state = 'active'
            
            # Clear any locks or blocks
            user.unlock_access! if user.respond_to?(:unlock_access!)
            user.failed_attempts = 0 if user.respond_to?(:failed_attempts=)
            
            # Save user
            if user.save(validate: false)
              puts 'SUCCESS: Root user configured successfully'
              puts 'Username: ' + user.username
              puts 'Email: ' + user.email
              puts 'Admin: ' + user.admin?.to_s
              puts 'Active: ' + user.active?.to_s
              puts 'Confirmed: ' + user.confirmed?.to_s
              puts 'State: ' + user.state.to_s
              
              # Test password validation
              if user.valid_password?('{{ gitlab_root_password }}')
                puts 'Password validation: SUCCESS'
              else
                puts 'Password validation: FAILED'
                exit 1
              end
            else
              puts 'FAILED to save user: ' + user.errors.full_messages.join(', ')
              exit 1
            end
            
          rescue => e
            puts 'ERROR: ' + e.message
            puts e.backtrace.join(\"\n\")
            exit 1
          end
          "
        register: root_user_setup
        changed_when: "'SUCCESS: Root user configured successfully' in root_user_setup.stdout"
        failed_when: root_user_setup.rc != 0

      - name: Clear all active sessions
        shell: |
          gitlab-rails runner "
          begin
            ActiveSession.destroy_all_but_current(nil)
            puts 'All sessions cleared'
          rescue => e
            puts 'Warning: Could not clear sessions: ' + e.message
          end
          "
        register: session_clear
        changed_when: false
        ignore_errors: true

      - name: Restart GitLab services for clean authentication state
        shell: gitlab-ctl restart puma nginx
        when: root_user_setup is changed

      - name: Verify root user authentication
        shell: |
          gitlab-rails runner "
          user = User.find_by(username: '{{ gitlab_root_username }}')
          if user
            puts 'VERIFICATION RESULTS:'
            puts '  Username: ' + user.username
            puts '  Email: ' + user.email
            puts '  ID: ' + user.id.to_s
            puts '  Admin: ' + user.admin?.to_s
            puts '  Active: ' + user.active?.to_s
            puts '  Confirmed: ' + user.confirmed?.to_s
            puts '  State: ' + user.state.to_s
            puts '  Password Valid: ' + user.valid_password?('{{ gitlab_root_password }}').to_s
            puts '  Can Sign In: ' + user.active_for_authentication?.to_s
            puts '  Account Locked: ' + user.access_locked?.to_s
          else
            puts 'ERROR: Root user not found after setup!'
            exit 1
          end
          "
        register: final_verification
        changed_when: false

  - name: Display GitLab login information
    debug:
      msg: |
        ========================================
        🚀 GitLab Installation Complete!
        ========================================
        
        🌐 GitLab URL: {{ gitlab_external_url }}
        
        🔑 Login Credentials:
           Username: {{ gitlab_root_username }}
           Password: {{ gitlab_root_password }}
        
        ⚠️  IMPORTANT:
           - Root password has been set to 'admin' for convenience
           {% if password_file is defined and not password_file.failed and password_file.content is defined %}
           - If login fails, check the original password in /etc/gitlab/initial_root_password
           {% endif %}
           - Change the password to something secure in production
           - This is a development/homelab setup
        
        🔍 User Status: {{ final_verification.stdout_lines | join(' | ') }}
        
        📧 Email: Configured to use local Postfix server
        🔒 SSL: Disabled for .home domains (using HTTP)
        
        ========================================

  handlers:
  - name: restart postfix
    service:
      name: postfix
      state: restarted

  - name: reconfigure gitlab
    command: gitlab-ctl reconfigure
    retries: 2
    delay: 10
    register: gitlab_reconfigure_result
    failed_when: gitlab_reconfigure_result.rc != 0 and 'letsencrypt' not in gitlab_reconfigure_result.stderr
