- name: Setup Kubernetes control plane binaries
  hosts: k8s_controller
  strategy: free
  become: true
  vars_files:
    - vars_kube.yaml

  tasks:

  - name: Ensure necessary directories exist
    file:
      path: "{{ item }}"
      state: directory
      mode: "0755"
      owner: root
      group: root
    loop:
      - "{{ controller_datapath }}"
      - "{{ controller_instpath }}"
      - "{{ controller_confpath }}"

  - name: Check if Kubernetes binaries are already downloaded
    stat:
      path: "{{ controller_instpath }}/{{ item }}"
    register: binary_stat
    with_items: "{{ controller_filenames }}"
    loop_control:
      loop_var: item

  - name: Download and install Kubernetes binaries {{ KUBE_VERSION }}
    get_url:
      url: "{{ KUBE_URL }}/{{ item.item }}"
      dest: "{{ controller_instpath }}/{{ item.item }}"
      mode: "0755"
    when: not item.stat.exists
    with_items: "{{ binary_stat.results }}"
    loop_control:
      loop_var: item

  - name: Resolve IP addresses for controller nodes
    block:
      - name: Get IP for each controller node
        set_fact:
          HOST_IP: "{{ HOST_IP | combine({ item: lookup('community.general.dig', item) }) }}"
        loop: "{{ groups['k8s_controller'] }}"

      # used for kube-apiservver.service
      - name: Get IP for API server
        set_fact:
          APISERVER_IP: "{{ lookup('community.general.dig', APISERVER) }}"

      - name: Get IPs for etcd peers
        set_fact:
          PEERS_IP: "{{ PEERS_IP | combine({ item: lookup('community.general.dig', item) }) }}"
        loop: "{{ groups['etcd'] }}"

      - name: Format etcd server URLs
        set_fact:
          ETCD_SERVER_URLS: "{{ ETCD_SERVER_URLS }}{{ (index > 0)|ternary(',','') }}https://{{ item.value }}:2379"
        loop: "{{ PEERS_IP | dict2items }}"
        loop_control:
          index_var: index

  - name: Deploy Kubernetes systemd service templates
    template:
      src: "files/kubernetes/{{ item }}.service.j2"
      dest: "/etc/systemd/system/{{ item }}.service"
      mode: "0644"
      owner: root
      group: root
    with_items:
      - kube-apiserver
      - kube-scheduler
      - kube-controller-manager

  - name: Deploy kube-scheduler YAML configuration
    template:
      src: "files/kubernetes/kube-scheduler.yaml.j2"
      dest: "{{ controller_confpath }}/kube-scheduler.yaml"
      mode: "0644"
      owner: root
      group: root

  - name: Enable and restart Kubernetes control plane services
    systemd:
      name: "{{ item }}"
      state: restarted
      enabled: true
      daemon_reload: true
    with_items:
      - kube-scheduler
      - kube-apiserver
      - kube-controller-manager

  - name: Validate Local API server response
    uri:
      url: "https://{{ ansible_default_ipv4.address }}:6443/healthz"
      method: GET
      status_code: 200
      validate_certs: no
    register: apiserver_health
    until: apiserver_health.status == 200
    retries: 6
    delay: 10
