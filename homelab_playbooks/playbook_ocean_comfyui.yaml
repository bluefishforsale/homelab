---
- name: Configure ComfyUI with CUDA support using Docker Compose
  hosts: ocean
  become: true
  gather_facts: true

  vars_files:
    - vars_comfyui_models.yaml

  vars:
    service: comfyui
    image: yanwk/comfyui-boot
    version: cu126-slim
    port: 8188
    data: /data01
    files: files/comfyui
    home: "{{ data }}/services/{{ service }}"
    user: media
    uid: 1001
    gid: 1001

  tasks:

  - name: Ensure base directory exists
    ansible.builtin.file:
      path: "{{ home }}"
      state: directory
      owner: "{{ user }}"
      group: "{{ user }}"
      mode: '0755'

  - name: Ensure ComfyUI subdirectories exist
    ansible.builtin.file:
      path: "{{ home }}/{{ item }}"
      state: directory
      owner: "{{ user }}"
      group: "{{ user }}"
      mode: '0755'
    with_items:
    - ComfyUI
    - ComfyUI/input
    - ComfyUI/output
    - ComfyUI/custom_nodes
    - .cache
    - .local

  - name: Ensure model type directories exist
    ansible.builtin.file:
      path: "{{ home }}/ComfyUI/models/{{ item }}"
      state: directory
      owner: "{{ user }}"
      group: "{{ user }}"
      mode: '0755'
    with_items: "{{ comfyui_model_types }}"

  - name: Create docker-compose.yml
    ansible.builtin.template:
      src: "{{ files }}/docker-compose.yml.j2"
      dest: "{{ home }}/docker-compose.yml"
      owner: "{{ user }}"
      group: "{{ user }}"
      mode: '0644'
    notify:
    - Reload systemd daemon
    - Restart comfyui service

  - name: Create comfyui environment file
    ansible.builtin.template:
      src: "{{ files }}/comfyui.env.j2"
      dest: "{{ home }}/.env"
      owner: "{{ user }}"
      group: "{{ user }}"
      mode: '0600'
    notify:
    - Reload systemd daemon
    - Restart comfyui service

  - name: Create comfyui systemd service
    ansible.builtin.template:
      src: "{{ files }}/{{ item }}.j2"
      dest: "/etc/systemd/system/{{ item }}"
      mode: '0644'
    with_items:
    - comfyui.service
    notify:
    - Reload systemd daemon
    - Restart comfyui service

  - name: Download ComfyUI models with curl
    ansible.builtin.shell: |
      MODEL_PATH="{{ home }}/ComfyUI/models/{{ item.0.key }}/{{ item.1.name }}"
      
      # Check if file already exists and has size > 0
      if [[ -f "$MODEL_PATH" && -s "$MODEL_PATH" ]]; then
        echo "ALREADY_EXISTS"
        exit 0
      fi
      
      # Download with curl
      curl -f -L --max-time {{ item.1.timeout | default(300) }} \
           --create-dirs \
           -w "HTTP_STATUS:%{http_code}" \
           -o "$MODEL_PATH.tmp" \
           "{{ item.1.url }}" && \
      mv "$MODEL_PATH.tmp" "$MODEL_PATH" && \
      chown {{ user }}:{{ user }} "$MODEL_PATH" && \
      chmod 644 "$MODEL_PATH" && \
      echo "DOWNLOADED" || \
      (rm -f "$MODEL_PATH.tmp" && echo "FAILED" && exit 1)
    with_subelements:
      - "{{ comfyui_models | dict2items }}"
      - value
    register: model_downloads
    failed_when: false
    ignore_errors: true
    tags: models

  - name: Debug model download raw results
    ansible.builtin.debug:
      var: model_downloads
    tags: [models, debug]
    when: false  # Enable by setting to true for debugging

  - name: Report model download results
    ansible.builtin.debug:
      msg: |
        Model Download Summary:
        {% if model_downloads is defined and model_downloads.results is defined %}
        {% for result in model_downloads.results %}
        - {{ result.item.0.key }}/{{ result.item.1.name }}: {{ result.stdout | default('UNKNOWN') }}{% if result.rc != 0 and result.stderr %} - {{ result.stderr }}{% endif %}
        {% endfor %}
        {% else %}
        No model downloads were processed.
        {% endif %}
    tags: models

  - name: List failed model downloads
    ansible.builtin.debug:
      msg: |
        Failed Downloads (these will need manual attention):
        {% if model_downloads is defined and model_downloads.results is defined %}
        {% for result in model_downloads.results %}
        {% if result.rc != 0 or result.stdout == 'FAILED' %}
        - {{ result.item.0.key }}/{{ result.item.1.name }}
          URL: {{ result.item.1.url }}
          Exit Code: {{ result.rc }}
          {% if result.stderr %}Error: {{ result.stderr }}{% endif %}
          {% if result.stdout %}Output: {{ result.stdout }}{% endif %}
        {% endif %}
        {% endfor %}
        {% else %}
        No failed downloads to report.
        {% endif %}
    when: model_downloads is defined and model_downloads.results is defined and model_downloads.results | selectattr('rc', 'ne', 0) | list | length > 0
    tags: models

  - name: Create model symlinks to avoid duplicating large files
    ansible.builtin.file:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      owner: "{{ user }}"
      group: "{{ user }}"
      state: link
      force: yes
    with_items: "{{ comfyui_model_symlinks | default([]) }}"
    tags: models

  - name: Enable comfyui service
    ansible.builtin.systemd:
      name: comfyui.service
      enabled: yes
      daemon_reload: yes

  handlers:
  - name: Reload systemd daemon
    ansible.builtin.systemd:
      daemon_reload: yes

  - name: Restart comfyui service
    ansible.builtin.systemd:
      name: comfyui.service
      state: restarted
