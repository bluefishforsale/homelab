---
- name: Configure systemd service for prometheus
  hosts: ocean
  become: true
  gather_facts: true

  vars:
    image: prom/prometheus
    version: latest
    service: prometheus
    prom_port: 9090
    prom_retention: 180d
    prom_config: prometheus.yml
    path_data01: /data01/services
    path_home: "{{ path_data01 }}/{{ service }}"
    prometheus_files: "files/ocean-prometheus"
    uid: 1026  # Ocean user ID
    gid: 100   # Users group ID
    blackbox_exporter_service: blackbox-exporter
    blackbox_exporter_image: prom/blackbox-exporter
    blackbox_exporter_version: master
    blackbox_exporter_port: 9115
    ndt_exporter_service: ndt-exporter
    ndt_exporter_image: bluefishforsale/ndt-speedtest-exporter
    ndt_exporter_version: latest
    ndt_exporter_port: 9140
    # Alertmanager (Docker Compose deployment)
    alertmanager_service: alertmanager
    alertmanager_image: prom/alertmanager
    alertmanager_version: latest
    alertmanager_port: 9093
    alertmanager_home: "{{ path_data01 }}/{{ alertmanager_service }}"
    alertmanager_files: "files/ocean-prometheus"
    # Karma (Alertmanager Dashboard)
    karma_service: karma
    karma_image: ghcr.io/prymitive/karma
    karma_version: latest
    karma_port: 8181
    karma_home: "{{ path_data01 }}/{{ karma_service }}"
    karma_files: "files/ocean-prometheus"

  tasks:

  - name: Ensure basedir exists
    ansible.builtin.file:
      path: "{{ path_home }}"
      state: directory
      owner: nobody
      group: nogroup
      mode: '0755'

  - name: Ensure subdirectory exists with correct ownership and permissions
    ansible.builtin.file:
      path: "{{ path_home }}/{{ item }}"
      state: directory
      owner: nobody
      group: nogroup
      mode: '0755'
    with_items:
    - config
    - data

  - name: Create prometheus config file
    ansible.builtin.template:
      src: "files/ocean-prometheus/{{ item }}.j2"
      dest: "{{ path_home }}/config/{{ item }}"
      owner: nobody
      group: nogroup
      mode: '0644'
    with_items:
    - prometheus.yml
    - alert_rules.yml
    notify:
    - Reload systemd daemon
    - Restart prometheus service

  - name: Create prometheus docker-compose.yml
    ansible.builtin.template:
      src: "{{ prometheus_files }}/prometheus-compose.yml.j2"
      dest: "{{ path_home }}/docker-compose.yml"
      owner: "{{ uid }}"
      group: "{{ gid }}"
      mode: '0644'
    register: prometheus_docker_compose_config

  - name: Create prometheus environment file
    ansible.builtin.template:
      src: "{{ prometheus_files }}/prometheus.env.j2"
      dest: "{{ path_home }}/.env"
      owner: "{{ uid }}"
      group: "{{ gid }}"
      mode: '0600'
    register: prometheus_env_config

  - name: Show prometheus configuration status
    ansible.builtin.debug:
      msg: "Prometheus configuration files have been updated - containers will be recreated"
    when: prometheus_docker_compose_config.changed or prometheus_env_config.changed

  - name: Force prometheus container recreation when configs change
    ansible.builtin.shell: |
      cd {{ path_home }}
      echo "Recreating Prometheus containers due to configuration changes..."
      docker-compose down --timeout 30
      docker-compose up -d --force-recreate
      echo "Prometheus container recreation completed"
    when: prometheus_docker_compose_config.changed or prometheus_env_config.changed

  - name: Create prometheus systemd service
    ansible.builtin.template:
      src: "files/ocean-prometheus/{{ item }}.j2"
      dest: "/etc/systemd/system/{{ item }}"
      mode: '0644'
    with_items:
    - prometheus.service
    notify:
    - Reload systemd daemon
    - Restart prometheus service

  - name: Ensure alertmanager directory exists
    ansible.builtin.file:
      path: "{{ item }}"
      state: directory
      owner: "{{ uid }}"
      group: "{{ gid }}"
      mode: '0755'
    with_items:
    - "{{ alertmanager_home }}"
    - "{{ alertmanager_home }}/config"
    - "{{ alertmanager_home }}/data"

  - name: Create alertmanager configuration
    ansible.builtin.template:
      src: "files/ocean-prometheus/alertmanager.yml.j2"
      dest: "{{ alertmanager_home }}/config/alertmanager.yml"
      owner: "{{ uid }}"
      group: "{{ gid }}"
      mode: '0644'
    notify:
    - Restart alertmanager service

  - name: Create alertmanager docker-compose.yml
    ansible.builtin.template:
      src: "{{ alertmanager_files }}/alertmanager-compose.yml.j2"
      dest: "{{ alertmanager_home }}/docker-compose.yml"
      owner: "{{ uid }}"
      group: "{{ gid }}"
      mode: '0644'
    register: alertmanager_docker_compose_config

  - name: Create alertmanager environment file
    ansible.builtin.template:
      src: "{{ alertmanager_files }}/alertmanager.env.j2"
      dest: "{{ alertmanager_home }}/.env"
      owner: "{{ uid }}"
      group: "{{ gid }}"
      mode: '0600'
    register: alertmanager_env_config

  - name: Show alertmanager configuration status
    ansible.builtin.debug:
      msg: "Alertmanager configuration files have been updated - containers will be recreated"
    when: alertmanager_docker_compose_config.changed or alertmanager_env_config.changed

  - name: Force alertmanager container recreation when configs change
    ansible.builtin.shell: |
      cd {{ alertmanager_home }}
      echo "Recreating Alertmanager containers due to configuration changes..."
      docker-compose down --timeout 30
      docker-compose up -d --force-recreate
      echo "Alertmanager container recreation completed"
    when: alertmanager_docker_compose_config.changed or alertmanager_env_config.changed

  - name: Create alertmanager systemd service
    ansible.builtin.template:
      src: "{{ alertmanager_files }}/alertmanager.service.j2"
      dest: "/etc/systemd/system/alertmanager.service"
      mode: '0644'
    notify:
    - Reload systemd daemon
    - Restart alertmanager service

  - name: Ensure karma directory exists
    ansible.builtin.file:
      path: "{{ item }}"
      state: directory
      owner: "{{ uid }}"
      group: "{{ gid }}"
      mode: '0755'
    with_items:
    - "{{ karma_home }}"
    - "{{ karma_home }}/config"

  - name: Create karma configuration
    ansible.builtin.template:
      src: "files/ocean-prometheus/karma.yml.j2"
      dest: "{{ karma_home }}/config/karma.yml"
      owner: "{{ uid }}"
      group: "{{ gid }}"
      mode: '0644'
    notify:
    - Restart karma service

  - name: Create karma docker-compose.yml
    ansible.builtin.template:
      src: "{{ karma_files }}/karma-compose.yml.j2"
      dest: "{{ karma_home }}/docker-compose.yml"
      owner: "{{ uid }}"
      group: "{{ gid }}"
      mode: '0644'
    register: karma_docker_compose_config

  - name: Create karma environment file
    ansible.builtin.template:
      src: "{{ karma_files }}/karma.env.j2"
      dest: "{{ karma_home }}/.env"
      owner: "{{ uid }}"
      group: "{{ gid }}"
      mode: '0600'
    register: karma_env_config

  - name: Show karma configuration status
    ansible.builtin.debug:
      msg: "Karma configuration files have been updated - containers will be recreated"
    when: karma_docker_compose_config.changed or karma_env_config.changed

  - name: Force karma container recreation when configs change
    ansible.builtin.shell: |
      cd {{ karma_home }}
      echo "Recreating Karma containers due to configuration changes..."
      docker-compose down --timeout 30
      docker-compose up -d --force-recreate
      echo "Karma container recreation completed"
    when: karma_docker_compose_config.changed or karma_env_config.changed

  - name: Create karma systemd service
    ansible.builtin.template:
      src: "{{ karma_files }}/karma.service.j2"
      dest: "/etc/systemd/system/karma.service"
      mode: '0644'
    notify:
    - Reload systemd daemon
    - Restart karma service

  - name: Create blackbox-exporter.service
    ansible.builtin.template:
      src: "files/ocean-prometheus/{{ item }}.j2"
      dest: "/etc/systemd/system/{{ item }}"
      mode: '0644'
    with_items:
    - blackbox-exporter.service
    notify:
    - Reload systemd daemon
    - Restart blackbox-exporter service

  - name: Create systemd ndt-exporter.service
    ansible.builtin.template:
      src: "files/ocean-prometheus/{{ item }}.j2"
      dest: "/etc/systemd/system/{{ item }}"
      mode: '0644'
    with_items:
    - ndt-exporter.service
    notify:
    - Reload systemd daemon
    - Restart ndt-exporter service

  - name: Start and enable prometheus Docker Compose service
    ansible.builtin.systemd:
      name: prometheus.service
      state: started
      enabled: true
      daemon_reload: yes

  - name: Start and enable blackbox-exporter service
    ansible.builtin.systemd:
      name: blackbox-exporter.service
      state: started
      enabled: true

  - name: Start and enable ndt-exporter service
    ansible.builtin.systemd:
      name: ndt-exporter.service
      state: started
      enabled: true

  - name: Start and enable alertmanager Docker Compose service
    ansible.builtin.systemd:
      name: alertmanager.service
      state: started
      enabled: true
      daemon_reload: yes

  - name: Start and enable karma Docker Compose service
    ansible.builtin.systemd:
      name: karma.service
      state: started
      enabled: true
      daemon_reload: yes

  handlers:
  - name: Reload systemd daemon
    ansible.builtin.systemd:
      daemon_reload: yes

  - name: Restart prometheus service
    ansible.builtin.systemd:
      name: prometheus.service
      state: restarted

  - name: Restart alertmanager service
    ansible.builtin.systemd:
      name: alertmanager.service
      state: restarted

  - name: Restart karma service
    ansible.builtin.systemd:
      name: karma.service
      state: restarted

  - name: Restart blackbox-exporter service
    ansible.builtin.systemd:
      name: blackbox-exporter.service
      state: restarted

  - name: Restart ndt-exporter service
    ansible.builtin.systemd:
      name: ndt-exporter.service
      state: restarted
