---
# Task to handle dpkg locks, repair pending dpkg configurations, and automatically fix broken packages

- name: Ensure dpkg is not locked before proceeding
  block:
    - name: Update apt cache if not done in the last 24 hours
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 86400  # 24 hours

    - name: Check if dpkg or apt is running
      shell: pgrep -x "dpkg|apt"
      register: dpkg_apt_running
      failed_when: false
      retries: 10
      delay: 5
      until: dpkg_apt_running.rc != 0
      ignore_errors: true

    - name: Attempt to gracefully stop any ongoing dpkg or apt operations
      shell: killall dpkg apt
      when: dpkg_apt_running.rc == 0
      ignore_errors: true

    - name: Wait for dpkg or apt lock files to be released
      shell: |
        while fuser /var/lib/dpkg/lock /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
          echo "Waiting for dpkg lock"; sleep 5;
        done
      register: dpkg_lock_check
      retries: 10
      delay: 5
      until: dpkg_lock_check.rc == 0
      ignore_errors: true

    - name: Forcefully kill any remaining dpkg or apt processes (as last resort)
      shell: killall -9 dpkg apt
      when: dpkg_lock_check.rc != 0
      ignore_errors: true

    - name: Repair any broken dpkg installations
      ansible.builtin.command: dpkg --configure --pending
      register: dpkg_repair
      ignore_errors: true

    - name: Debug dpkg repair output
      debug:
        msg: "dpkg repair: {{ dpkg_repair.stdout }}"
      when: dpkg_repair.rc != 0

  rescue:
    - name: Log failure to handle dpkg locks gracefully
      debug:
        msg: "Failed to handle dpkg locks after multiple attempts"

# Automatically fix and reinstall broken packages

- name: Identify broken packages
  shell: |
    dpkg --audit | grep -Po "(?<=Package )[^\s]+"
  register: broken_packages
  changed_when: false
  ignore_errors: yes

- name: Debug broken packages found
  debug:
    msg: "Broken packages identified: {{ broken_packages.stdout_lines }}"

- name: Reinstall broken packages
  apt:
    name: "{{ item }}"
    state: present
    force: yes
  loop: "{{ broken_packages.stdout_lines }}"
  when: broken_packages.stdout_lines | length > 0
  ignore_errors: yes

- name: Attempt to configure all packages
  command: dpkg --configure --pending
  register: dpkg_configure_result
  ignore_errors: yes

- name: Debug dpkg configure result
  debug:
    msg: "{{ dpkg_configure_result.stderr }}"
  when: dpkg_configure_result.rc != 0

- name: Retry reinstalling and configuring broken packages
  apt:
    name: "{{ item }}"
    state: present
    force: yes
  loop: "{{ broken_packages.stdout_lines }}"
  ignore_errors: yes
  when: dpkg_configure_result.rc != 0

- name: Final attempt to configure all packages
  command: dpkg --configure --pending
  ignore_errors: yes

- name: Debug final dpkg configure result
  debug:
    msg: "{{ dpkg_configure_result.stderr }}"
  when: dpkg_configure_result.rc != 0
