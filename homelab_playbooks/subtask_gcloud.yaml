  - name: Install prerequisites on Debian/Ubuntu
    ansible.builtin.apt:
      name: "{{ item }}"
      state: present
    loop:
      - apt-transport-https
      - ca-certificates
      - gnupg
    when: ansible_facts['os_family'] == "Debian"

  - name: Add Google Cloud SDK repository (Debian/Ubuntu)
    ansible.builtin.shell: |
      echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
    args:
      creates: /etc/apt/sources.list.d/google-cloud-sdk.list
    when: ansible_facts['os_family'] == "Debian"

  - name: Install Google Cloud SDK on Debian/Ubuntu
    ansible.builtin.apt:
      name: "google-cloud-sdk"
      state: latest
      update_cache: true
    when: ansible_facts['os_family'] == "Debian"

  - name: Check if Homebrew is installed
    ansible.builtin.command: which brew
    register: homebrew_check
    changed_when: false
    failed_when: homebrew_check.rc != 0
    when: ansible_facts['os_family'] == "Darwin"

  - name: Install Homebrew
    ansible.builtin.shell: |
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    when: ansible_facts['os_family'] == "Darwin" and not homebrew_check

  - name: Install Google Cloud SDK on macOS
    community.general.homebrew:
      name: "google-cloud-sdk"
      state: latest
    when: ansible_facts['os_family'] == "Darwin"

  - name: Ensure GCloud credentials directory exists
    ansible.builtin.file:
      path: "{{ ansible_env.HOME }}/config/gcloud/"
      state: directory
      mode: '0755'

  # - name: Update gcloud command
  #   ansible.builtin.command: gcloud components update
  #   register: gcloud_components_check
  #   changed_when: false
  #   failed_when: gcloud_components_check.rc != 0

  # - name: Install missing GCloud components
  #   ansible.builtin.command: gcloud components install {{ item }} --quiet
  #   environment:
  #     CLOUDSDK_CORE_DISABLE_PROMPTS: 1
  #   with_items: "{{ gcloud_components_to_install }}"
  #   when: "'{{ item }}' not in gcloud_components_check.stdout"

  - name: Update GCloud components
    ansible.builtin.command: gcloud components update --quiet
    environment:
      CLOUDSDK_CORE_DISABLE_PROMPTS: 1

  - name: Authenticate GCloud account (check existing auth)
    ansible.builtin.command: gcloud auth application-default print-access-token
    register: gcloud_auth_status
    changed_when: false
    failed_when: gcloud_auth_status.rc != 0

  - name: Authenticate GCloud with service account if needed
    ansible.builtin.command: gcloud auth application-default login --quiet
    environment:
      CLOUDSDK_CORE_DISABLE_PROMPTS: 1
    when: gcloud_auth_status.rc != 0
  
  - name: Create a GCP service account
    google.cloud.gcp_iam_service_account:
      name: "{{ homelab_service_account_name }}"
      display_name: "{{ homelab_service_account_name.split('@')[0] }}"
      project: "{{ homelab_project_name }}"
      auth_kind: "serviceaccount"
      service_account_file: "{{ homelab_sa_admin_credentials_file }}"
      state: "present"
    register: sa_result
    environment:
      PATH: "{{ lookup('pipe', 'pyenv root') }}/shims:{{ ansible_env.PATH }}"

  - name: Generate service account key
    google.cloud.gcp_iam_service_account_key:
      service_account: "{{ sa_result.name }}"
      private_key_type: TYPE_GOOGLE_CREDENTIALS_FILE
      state: "present"
      auth_kind: "serviceaccount"
      service_account_file: "{{ homelab_sa_admin_credentials_file }}"
    register: sa_key_result
    environment:
      PATH: "{{ lookup('pipe', 'pyenv root') }}/shims:{{ ansible_env.PATH }}"

  - name: Write the service account key to a file
    ansible.builtin.copy:
      content: "{{ sa_key_result.privateKeyData | b64decode }}"
      dest: "{{ homelab_sa_admin_credentials_file }}"
      mode: '0600'
