---
- name: Plex and companion docker systemd services
  hosts: node005
  become: true
  gather_facts: true
  vars:
    vm_ids: "{{ groups['k8s'] | map('regex_replace', '^kube', '') | list }}"

  tasks:
  - name: Download ssh keys
    ansible.builtin.get_url:
      url: "https://github.com/bluefishforsale.keys"
      dest: "/root/ssh.keys"
      mode: '0600'
      owner: root
      group: root

  - name: Check VM id status
    command: "qm status {{ item }}"
    register: vm_status
    with_items: "{{ vm_ids }}"
    ignore_errors: true

  - name: Clone template instance if not created
    command: qm clone 9999 {{ item }}
    when: >
      item not in vm_status.results | map(attribute='item') | list or (vm_status.results | selectattr('item', 'equalto', item) | map(attribute='stdout') | list | first is not search('running|stopped'))
    loop: "{{ vm_ids }}"

  - name: Set common VM configuration settings
    shell: |
      qm set {{ item }} --name kube{{ item }} --ipconfig0 ip=$(host kube{{ item }}.home | awk '{print $NF}')/24,gw=192.168.1.1 --nameserver=192.168.1.2 --onboot 1
      qm set {{ item }} --sshkeys /root/ssh.keys
      qm resize {{ item }} scsi0 +8G 
    when: >
      item not in vm_status.results | map(attribute='item') | list or (vm_status.results | selectattr('item', 'equalto', item) | map(attribute='stdout') | list | first is not search('running'))
    loop: "{{ vm_ids }}"

  - name: Set Control plane options
    shell: |
      qm set {{ item }} --cores 4
      qm set {{ item }}  --memory 2048 
    when: >
      item is match('.*50.*') and (item not in vm_status.results | map(attribute='item') | list or  (vm_status.results | selectattr('item', 'equalto', item) | map(attribute='stdout') | list | first is not search('running')))
    loop: "{{ vm_ids }}"

  - name: Set worker options
    shell: |
      qm set {{ item }} --cores 8
      qm set {{ item }} --memory 8192 
    when: >
      item is match('.*51.*') and (item not in vm_status.results | map(attribute='item') | list or  (vm_status.results | selectattr('item', 'equalto', item) | map(attribute='stdout') | list | first is not search('running')))
    loop: "{{ vm_ids }}"

  - name: Set GPU options
    shell: "qm set {{ item }} --hostpci0=42:00,pcie=1"
    when: >
      (item not in vm_status.results | map(attribute='item') | list or (vm_status.results | selectattr('item', 'equalto', item) | map(attribute='stdout') | list | first is not search('running'))) and (hostvars[inventory_hostname].enable_gpu | default(false))
    loop: "{{ vm_ids }}"

  - name: Start all VMs
    command: "qm start {{ item }}"
    with_items: "{{ vm_ids }}"
